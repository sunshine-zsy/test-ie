{"version":3,"file":"js/829-legacy.2a933663.js","mappings":"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","sources":["webpack://pc-exam-student/./src/views/practice/exam.vue","webpack://pc-exam-student/src/views/practice/exam.vue","webpack://pc-exam-student/./src/views/practice/exam.vue?c427","webpack://pc-exam-student/./src/views/practice/exam.vue?ab96","webpack://pc-exam-student/./src/api/practice.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],staticClass:\"practice-exam\"},[_c('div',{staticClass:\"exam-header\"},[_c('div',{staticClass:\"left\"},[_c('div',{staticClass:\"back\",on:{\"click\":function($event){return _vm.$router.back()}}},[_c('i',{staticClass:\"el-icon-arrow-left\"}),_vm._v(\" 返回 \")]),_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.getExamTitle))])]),_c('div',{staticClass:\"right\"},[_c('div',{staticClass:\"stats\"},[_c('span',{staticClass:\"stat-item\"},[_vm._v(\"答对：\"+_vm._s(_vm.correctCount)+\"题\")]),_c('span',{staticClass:\"stat-item\"},[_vm._v(\"答错：\"+_vm._s(_vm.wrongCount)+\"题\")]),_c('span',{staticClass:\"stat-item\"},[_vm._v(\"正确率：\"+_vm._s(_vm.correctRate)+\"%\")])]),_c('el-checkbox',{model:{value:(_vm.autoNext),callback:function ($$v) {_vm.autoNext=$$v},expression:\"autoNext\"}},[_vm._v(\"答对继续下一题\")])],1)]),_c('div',{staticClass:\"exam-content\"},[_c('div',{staticClass:\"question-area\"},[_c('div',{staticClass:\"question-content-scroll\"},[_c('div',{staticClass:\"question-type\"},[_vm._v(_vm._s(_vm.currentQuestion?.typeName || '单选题'))]),_c('div',{staticClass:\"question-title\"},[_c('span',{staticClass:\"number\"},[_vm._v(_vm._s(_vm.currentIndex + 1)+\".\")]),_c('span',{staticClass:\"text\",domProps:{\"innerHTML\":_vm._s(_vm.currentQuestion?.title || '题目内容')}})]),_c('div',{staticClass:\"options-list\"},_vm._l((_vm.currentQuestion?.options),function(option){return _c('div',{key:option.id,staticClass:\"option-item\",class:{ \n              active: _vm.isOptionSelected(option.id),\n              'multiple-choice': _vm.currentQuestion?.type === 2,\n              'correct': _vm.isWrongMode && _vm.isCorrectAnswer(option.id)\n            },on:{\"click\":function($event){return _vm.selectOption(option.id)}}},[_c('span',{staticClass:\"option-label\"},[_vm._v(_vm._s(option.label))]),_c('span',{staticClass:\"option-text\",domProps:{\"innerHTML\":_vm._s(option.content)}})])}),0),(_vm.isWrongMode)?_c('div',{staticClass:\"answer-analysis\"},[_c('div',{staticClass:\"correct-answer\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"正确答案：\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.getCorrectAnswerLabel))])]),_c('div',{staticClass:\"analysis\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"答案解析：\")]),_c('div',{staticClass:\"value\",domProps:{\"innerHTML\":_vm._s(_vm.currentQuestion?.questionsTopicVo?.analysis || '暂无解析')}})])]):_vm._e(),_c('div',{staticClass:\"bottom-space\"})])]),_c('div',{staticClass:\"answer-card\"},[_c('div',{staticClass:\"card-title\"},[_vm._v(\"答题卡\")]),_c('div',{staticClass:\"card-content\"},_vm._l((_vm.questions),function(q,index){return _c('div',{key:index,staticClass:\"question-number\",class:{\n            active: index === _vm.currentIndex,\n            answered: q.answered\n          },on:{\"click\":function($event){return _vm.goToQuestion(index)}}},[_vm._v(\" \"+_vm._s(index + 1)+\" \")])}),0)])]),(!_vm.isWrongMode)?_c('div',{staticClass:\"exam-footer\"},[_c('div',{staticClass:\"left\"},[_c('el-button',{attrs:{\"disabled\":_vm.currentIndex === 0},on:{\"click\":_vm.prevQuestion}},[_vm._v(\"上一题\")]),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.handleNextOrSubmit}},[_vm._v(\" \"+_vm._s(_vm.isLastQuestion ? '提交' : '下一题')+\" \")])],1),_c('div',{staticClass:\"right\"},[_c('el-button',{attrs:{\"type\":\"warning\"},on:{\"click\":_vm.submitExam}},[_vm._v(\"交卷\")])],1)]):_c('div',{staticClass:\"exam-footer\"},[_c('div',{staticClass:\"left\"},[_c('el-button',{attrs:{\"disabled\":_vm.currentIndex === 0},on:{\"click\":_vm.prevQuestion}},[_vm._v(\"上一题\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"disabled\":_vm.isLastQuestion},on:{\"click\":_vm.nextQuestion}},[_vm._v(\"下一题\")])],1),_c('div',{staticClass:\"right\"},[_c('el-button',{on:{\"click\":function($event){return _vm.$router.push('/practice')}}},[_vm._v(\"返回题库\")])],1)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"practice-exam\" v-loading=\"loading\">\r\n    <!-- 顶部导航 -->\r\n    <div class=\"exam-header\">\r\n      <div class=\"left\">\r\n        <div class=\"back\" @click=\"$router.back()\">\r\n          <i class=\"el-icon-arrow-left\"></i>\r\n          返回\r\n        </div>\r\n        <div class=\"title\">{{ getExamTitle }}</div>\r\n      </div>\r\n      <div class=\"right\">\r\n        <div class=\"stats\">\r\n          <span class=\"stat-item\">答对：{{ correctCount }}题</span>\r\n          <span class=\"stat-item\">答错：{{ wrongCount }}题</span>\r\n          <span class=\"stat-item\">正确率：{{ correctRate }}%</span>\r\n        </div>\r\n        <el-checkbox v-model=\"autoNext\">答对继续下一题</el-checkbox>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 题目内容 -->\r\n    <div class=\"exam-content\">\r\n      <!-- 题目区域 -->\r\n      <div class=\"question-area\">\r\n        <div class=\"question-content-scroll\">\r\n          <!-- 题目内容 -->\r\n          <div class=\"question-type\">{{ currentQuestion?.typeName || '单选题' }}</div>\r\n          <div class=\"question-title\">\r\n            <span class=\"number\">{{ currentIndex + 1 }}.</span>\r\n            <span class=\"text\" v-html=\"currentQuestion?.title || '题目内容'\"></span>\r\n          </div>\r\n          \r\n          <!-- 选项列表 -->\r\n          <div class=\"options-list\">\r\n            <div \r\n              v-for=\"option in currentQuestion?.options\" \r\n              :key=\"option.id\"\r\n              class=\"option-item\"\r\n              :class=\"{ \r\n                active: isOptionSelected(option.id),\r\n                'multiple-choice': currentQuestion?.type === 2,\r\n                'correct': isWrongMode && isCorrectAnswer(option.id)\r\n              }\"\r\n              @click=\"selectOption(option.id)\"\r\n            >\r\n              <span class=\"option-label\">{{ option.label }}</span>\r\n              <span class=\"option-text\" v-html=\"option.content\"></span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 背题模式下显示答案和解析 -->\r\n          <div v-if=\"isWrongMode\" class=\"answer-analysis\">\r\n            <div class=\"correct-answer\">\r\n              <span class=\"label\">正确答案：</span>\r\n              <span class=\"value\">{{ getCorrectAnswerLabel }}</span>\r\n            </div>\r\n            <div class=\"analysis\">\r\n              <span class=\"label\">答案解析：</span>\r\n              <div class=\"value\" v-html=\"currentQuestion?.questionsTopicVo?.analysis || '暂无解析'\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 添加底部间距 -->\r\n          <div class=\"bottom-space\"></div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 答题卡 -->\r\n      <div class=\"answer-card\">\r\n        <div class=\"card-title\">答题卡</div>\r\n        <div class=\"card-content\">\r\n          <div \r\n            v-for=\"(q, index) in questions\" \r\n            :key=\"index\"\r\n            class=\"question-number\"\r\n            :class=\"{\r\n              active: index === currentIndex,\r\n              answered: q.answered\r\n            }\"\r\n            @click=\"goToQuestion(index)\"\r\n          >\r\n            {{ index + 1 }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 底部操作栏 -->\r\n    <div class=\"exam-footer\" v-if=\"!isWrongMode\">\r\n      <div class=\"left\">\r\n        <el-button @click=\"prevQuestion\" :disabled=\"currentIndex === 0\">上一题</el-button>\r\n        <el-button @click=\"handleNextOrSubmit\" type=\"primary\">\r\n          {{ isLastQuestion ? '提交' : '下一题' }}\r\n        </el-button>\r\n      </div>\r\n      <div class=\"right\">\r\n        <el-button type=\"warning\" @click=\"submitExam\">交卷</el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 背题模式下的底部操作栏 -->\r\n    <div class=\"exam-footer\" v-else>\r\n      <div class=\"left\">\r\n        <el-button @click=\"prevQuestion\" :disabled=\"currentIndex === 0\">上一题</el-button>\r\n        <el-button @click=\"nextQuestion\" type=\"primary\" :disabled=\"isLastQuestion\">下一题</el-button>\r\n      </div>\r\n      <div class=\"right\">\r\n        <el-button @click=\"$router.push('/practice')\">返回题库</el-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getPracticeQuestions, submitPracticeAnswer } from '@/api/practice'\r\nimport logger from '@/utils/logger'\r\n\r\nexport default {\r\n  name: 'PracticeExam',\r\n  data() {\r\n    return {\r\n      currentIndex: 0,\r\n      questions: [],\r\n      loading: false,\r\n      autoNext: true,\r\n      correctCount: 0,\r\n      wrongCount: 0\r\n    }\r\n  },\r\n  computed: {\r\n    currentQuestion() {\r\n      return this.questions[this.currentIndex]\r\n    },\r\n    totalQuestions() {\r\n      return this.questions.length\r\n    },\r\n    isLastQuestion() {\r\n      return this.currentIndex === this.totalQuestions - 1\r\n    },\r\n    getExamTitle() {\r\n      const type = this.$route.query.type\r\n      const typeMap = {\r\n        sequence: '顺序练习',\r\n        random: '随机练习',\r\n        wrong: '背题模式',\r\n        single: '单选题练习',\r\n        multiple: '多选题练习',\r\n        judge: '判断题练习'\r\n      }\r\n      return typeMap[type] || '练习模式'\r\n    },\r\n    correctRate() {\r\n      const total = this.correctCount + this.wrongCount\r\n      if (total === 0) return 100\r\n      return Math.round((this.correctCount / total) * 100)\r\n    },\r\n    // 是否为背题模式\r\n    isWrongMode() {\r\n      return this.$route.query.type === 'wrong'\r\n    },\r\n    // 获取正确答案的选项标签\r\n    getCorrectAnswerLabel() {\r\n      if (!this.currentQuestion) return ''\r\n      \r\n      const correctOptions = this.currentQuestion.options.filter(option => \r\n        option.isRight === 1\r\n      )\r\n      \r\n      return correctOptions.map(option => option.label).join('、')\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchQuestions()\r\n  },\r\n  methods: {\r\n    // 获取试题列表\r\n    async fetchQuestions() {\r\n      try {\r\n        this.loading = true\r\n        const recordId = this.$route.query.recordId\r\n        if (!recordId) {\r\n          throw new Error('训练组ID不存在')\r\n        }\r\n\r\n        const res = await getPracticeQuestions(recordId)\r\n        \r\n        if (res.code === 200) {\r\n          // 获取题目列表\r\n          const questionList = res.data?.practiceRecordsTopicList || []\r\n          \r\n          if (questionList.length === 0) {\r\n            this.$message.warning('没有可用的题目')\r\n            return\r\n          }\r\n          \r\n          this.questions = this.formatQuestions(questionList)\r\n          logger.log('处理后的题目:', this.questions)\r\n        }\r\n      } catch (error) {\r\n        logger.error('获取试题失败:', error)\r\n        this.$message.error(error.message || '获取试题失败')\r\n        this.$router.back()\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    // 格式化题目数据\r\n    formatQuestions(questionList) {\r\n      logger.debug('格式化题目数据:', questionList)\r\n      return questionList.map(item => ({\r\n        id: item.id,\r\n        type: item.questionType,\r\n        typeName: this.getTypeName(item.questionType),\r\n        title: item.questionsTopicVo.content,\r\n        options: this.formatOptions(item.questionsTopicVo.questionOptionsList),\r\n        answer: null,\r\n        answered: false,\r\n        isCorrect: false,  // 添加 isCorrect 字段\r\n        correctAnswer: item.rightOptions, // 正确答案ID\r\n        questionsTopicVo: item.questionsTopicVo // 保存完整的题目信息，包含解析\r\n      }))\r\n    },\r\n\r\n    // 获取题目类型名称\r\n    getTypeName(type) {\r\n      const typeMap = {\r\n        1: '单选题',\r\n        2: '多选题',\r\n        3: '判断题'\r\n      }\r\n      return typeMap[type] || '未知类型'\r\n    },\r\n\r\n    // 格式化选项\r\n    formatOptions(options) {\r\n      if (!options) return []\r\n      \r\n      // 直接处理 questionOptionsList 数组\r\n      return options.map((option, index) => ({\r\n        id: option.id || index + 1,\r\n        label: String.fromCharCode(65 + index),\r\n        content: option.content, // 使用 content 字段作为选项内容\r\n        isRight: option.isRight // 保存选项是否正确的标记\r\n      }))\r\n    },\r\n\r\n    // 判断是否为正确答案\r\n    isCorrectAnswer(optionId) {\r\n      if (!this.currentQuestion) return false\r\n      \r\n      // 在背题模式下，使用 isRight 判断\r\n      if (this.isWrongMode) {\r\n        const option = this.currentQuestion.options.find(opt => opt.id === optionId)\r\n        return option?.isRight === 1\r\n      }\r\n      \r\n      // 非背题模式下的判断逻辑保持不变\r\n      if (Array.isArray(this.currentQuestion.correctAnswer)) {\r\n        return this.currentQuestion.correctAnswer.includes(optionId)\r\n      }\r\n      return this.currentQuestion.correctAnswer === optionId\r\n    },\r\n\r\n    // 选择选项\r\n    selectOption(optionId) {\r\n      // 背题模式下禁用选择\r\n      if (this.isWrongMode) return\r\n      \r\n      if (!this.currentQuestion) return\r\n      \r\n      // 多选题处理\r\n      if (this.currentQuestion.type === 2) {\r\n        if (!Array.isArray(this.currentQuestion.answer)) {\r\n          this.currentQuestion.answer = []\r\n        }\r\n        \r\n        const index = this.currentQuestion.answer.indexOf(optionId)\r\n        if (index === -1) {\r\n          this.currentQuestion.answer.push(optionId)\r\n        } else {\r\n          this.currentQuestion.answer.splice(index, 1)\r\n        }\r\n\r\n        // 只要有选择就标记为已答题\r\n        const hasAnswer = this.currentQuestion.answer.length > 0\r\n        const wasAnswered = this.currentQuestion.answered\r\n        const wasCorrect = this.currentQuestion.isCorrect\r\n        \r\n        this.currentQuestion.answered = hasAnswer\r\n\r\n        // 如果取消了所有选择，需要减去之前的计数\r\n        if (!hasAnswer && wasAnswered) {\r\n          if (wasCorrect) {\r\n            this.correctCount--\r\n          } else {\r\n            this.wrongCount--\r\n          }\r\n          this.currentQuestion.isCorrect = false\r\n          return\r\n        }\r\n        \r\n        // 检查多选题答案是否正确\r\n        if (hasAnswer) {\r\n          const userAnswer = this.currentQuestion.answer.sort().join(',')\r\n          const correctAnswer = Array.isArray(this.currentQuestion.correctAnswer) ? \r\n            this.currentQuestion.correctAnswer.sort().join(',') :\r\n            this.currentQuestion.correctAnswer\r\n          \r\n          const isCorrect = userAnswer === correctAnswer\r\n          \r\n          // 如果之前已答题，需要更新计数\r\n          if (wasAnswered) {\r\n            // 如果从错改对\r\n            if (!wasCorrect && isCorrect) {\r\n              this.wrongCount--\r\n              this.correctCount++\r\n            }\r\n            // 如果从对改错\r\n            else if (wasCorrect && !isCorrect) {\r\n              this.correctCount--\r\n              this.wrongCount++\r\n            }\r\n          } else {\r\n            // 新答题\r\n            if (isCorrect) {\r\n              this.correctCount++\r\n            } else {\r\n              this.wrongCount++\r\n            }\r\n          }\r\n          \r\n          this.currentQuestion.isCorrect = isCorrect\r\n        }\r\n      } else {\r\n        // 单选题处理\r\n        const wasAnswered = this.currentQuestion.answered\r\n        const wasCorrect = this.currentQuestion.isCorrect\r\n        \r\n        this.currentQuestion.answer = optionId\r\n        this.currentQuestion.answered = true\r\n        \r\n        // 检查单选题答案是否正确\r\n        const isCorrect = optionId === this.currentQuestion.correctAnswer\r\n        \r\n        // 如果之前已答题，需要更新计数\r\n        if (wasAnswered) {\r\n          // 如果从错改对\r\n          if (!wasCorrect && isCorrect) {\r\n            this.wrongCount--\r\n            this.correctCount++\r\n          }\r\n          // 如果从对改错\r\n          else if (wasCorrect && !isCorrect) {\r\n            this.correctCount--\r\n            this.wrongCount++\r\n          }\r\n        } else {\r\n          // 新答题\r\n          if (isCorrect) {\r\n            this.correctCount++\r\n          } else {\r\n            this.wrongCount++\r\n          }\r\n        }\r\n        \r\n        this.currentQuestion.isCorrect = isCorrect\r\n        \r\n        // 如果答对且开启了自动下一题，延迟后自动跳转\r\n        if (isCorrect && this.autoNext && !this.isLastQuestion) {\r\n          setTimeout(() => {\r\n            this.nextQuestion()\r\n          }, 500)\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 判断选项是否被选中\r\n    isOptionSelected(optionId) {\r\n      if (!this.currentQuestion?.answer) return false\r\n      \r\n      if (this.currentQuestion.type === 2) {\r\n        return Array.isArray(this.currentQuestion.answer) && \r\n          this.currentQuestion.answer.includes(optionId)\r\n      }\r\n      \r\n      return this.currentQuestion.answer === optionId\r\n    },\r\n    \r\n    // 上一题\r\n    prevQuestion() {\r\n      if (this.currentIndex > 0) {\r\n        this.currentIndex--\r\n      }\r\n    },\r\n    \r\n    // 处理下一题或提交按钮点击\r\n    handleNextOrSubmit() {\r\n      // 背题模式下不需要提交\r\n      if (this.isWrongMode) {\r\n        this.nextQuestion()\r\n        return\r\n      }\r\n\r\n      if (this.isLastQuestion) {\r\n        this.submitExam()\r\n      } else {\r\n        this.nextQuestion()\r\n      }\r\n    },\r\n    \r\n    // 下一题\r\n    nextQuestion() {\r\n      // 背题模式下直接切换到下一题\r\n      if (this.isWrongMode) {\r\n        if (this.currentIndex < this.totalQuestions - 1) {\r\n          this.currentIndex++\r\n        }\r\n        return\r\n      }\r\n\r\n      // 如果是多选题且已选择但未标记answered，先提交答案\r\n      if (this.currentQuestion?.type === 2 && \r\n          Array.isArray(this.currentQuestion.answer) && \r\n          this.currentQuestion.answer.length > 0 && \r\n          !this.currentQuestion.answered) {\r\n        this.submitMultipleAnswer()\r\n      }\r\n      \r\n      if (this.currentIndex < this.totalQuestions - 1) {\r\n        this.currentIndex++\r\n      }\r\n    },\r\n    \r\n    // 跳转到指定题目\r\n    goToQuestion(index) {\r\n      this.currentIndex = index\r\n    },\r\n    \r\n    // 提交试卷\r\n    async submitExam() {\r\n      // 检查是否所有题目都已作答\r\n      const unfinishedIndex = this.questions.findIndex(q => {\r\n        // 对于多选题，检查是否有选择且已标记为answered\r\n        if (q.type === 2) {\r\n          return !q.answered || !Array.isArray(q.answer) || q.answer.length === 0\r\n        }\r\n        // 对于单选题，只需要检查是否有answer\r\n        return !q.answer\r\n      })\r\n\r\n      if (unfinishedIndex !== -1) {\r\n        this.$confirm(`第 ${unfinishedIndex + 1} 题还未作答，是否继续提交？`, '提示', {\r\n          confirmButtonText: '继续提交',\r\n          cancelButtonText: '返回作答',\r\n          type: 'warning'\r\n        }).then(() => {\r\n          this.submitAllAnswers()\r\n        }).catch(() => {\r\n          this.goToQuestion(unfinishedIndex)\r\n        })\r\n      } else {\r\n        this.submitAllAnswers()\r\n      }\r\n    },\r\n\r\n    // 提交所有答案\r\n    async submitAllAnswers() {\r\n      try {\r\n        this.loading = true\r\n        \r\n        // 收集所有答案\r\n        const submitPromises = this.questions.map(question => {\r\n          // 如果题目没有answer，返回null\r\n          if (!question.answer || (Array.isArray(question.answer) && question.answer.length === 0)) {\r\n            return null\r\n          }\r\n          \r\n          const userOptions = Array.isArray(question.answer) ? \r\n            question.answer.join(',') : \r\n            question.answer\r\n\r\n          return submitPracticeAnswer({\r\n            id: question.id,                       // 使用 practiceRecordsTopicList 的 ID\r\n            userOptions\r\n          })\r\n        }).filter(Boolean) // 过滤掉未作答的题目\r\n\r\n        // 等待所有答案提交完成\r\n        await Promise.all(submitPromises)\r\n        \r\n        this.$message.success('提交成功')\r\n        this.$router.push('/practice')\r\n      } catch (error) {\r\n        logger.error('提交答案失败:', error)\r\n        this.$message.error('提交答案失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    // 多选题提交答案\r\n    submitMultipleAnswer() {\r\n      if (!this.currentQuestion || !Array.isArray(this.currentQuestion.answer)) return\r\n      \r\n      this.currentQuestion.answered = true\r\n      \r\n      // 检查多选题答案是否正确\r\n      const userAnswer = this.currentQuestion.answer.sort().join(',')\r\n      const correctAnswer = this.currentQuestion.correctAnswer.split(',').sort().join(',')\r\n      \r\n      const isCorrect = userAnswer === correctAnswer\r\n      if (isCorrect) {\r\n        this.correctCount++\r\n        // 如果答对且开启了自动下一题，延迟后自动跳转\r\n        if (this.autoNext && !this.isLastQuestion) {\r\n          setTimeout(() => {\r\n            this.nextQuestion()\r\n          }, 500)\r\n        }\r\n      } else {\r\n        this.wrongCount++\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.practice-exam {\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: #f5f7fa;\r\n}\r\n\r\n.exam-header {\r\n  background: #fff;\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.exam-header .left {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n}\r\n\r\n.back {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  color: #606266;\r\n}\r\n\r\n.back i {\r\n  margin-right: 5px;\r\n}\r\n\r\n.title {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #303133;\r\n}\r\n\r\n.progress {\r\n  font-size: 14px;\r\n  color: #606266;\r\n}\r\n\r\n.exam-content {\r\n  flex: 1;\r\n  padding: 20px;\r\n  display: flex;\r\n  gap: 20px;\r\n  overflow: hidden;\r\n}\r\n\r\n.question-area {\r\n  flex: 1;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden; /* 防止内容溢出 */\r\n}\r\n\r\n/* 添加滚动容器 */\r\n.question-content-scroll {\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  /* 添加平滑滚动 */\r\n  scroll-behavior: smooth;\r\n  /* 在 WebKit 浏览器中美化滚动条 */\r\n  &::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #dcdfe6;\r\n    border-radius: 3px;\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    background: #f5f7fa;\r\n  }\r\n}\r\n\r\n.question-type {\r\n  color: #909399;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.question-title {\r\n  font-size: 16px;\r\n  color: #303133;\r\n  margin-bottom: 30px;\r\n  line-height: 1.8;\r\n}\r\n\r\n.question-title .number {\r\n  margin-right: 10px;\r\n  font-weight: 500;\r\n}\r\n\r\n.question-title .text {\r\n  display: inline-block;\r\n}\r\n\r\n/* 允许富文本内容样式 */\r\n:deep(.question-title img) {\r\n  max-width: 100%;\r\n  height: auto;\r\n  margin: 10px 0;\r\n}\r\n\r\n.options-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.option-item {\r\n  padding: 15px;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.option-item:hover {\r\n  background: #f5f7fa;\r\n}\r\n\r\n.option-item.active {\r\n  background: #ecf5ff;\r\n  border-color: #409eff;\r\n  color: #409eff;\r\n}\r\n\r\n.option-label {\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  background: #f5f7fa;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 10px;\r\n}\r\n\r\n.answer-card {\r\n  width: 240px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n}\r\n\r\n.card-title {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #303133;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card-content {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  gap: 10px;\r\n}\r\n\r\n.question-number {\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  color: #606266;\r\n}\r\n\r\n.question-number.active {\r\n  background: #409eff;\r\n  color: #fff;\r\n  border-color: #409eff;\r\n}\r\n\r\n.question-number.answered {\r\n  background: #67c23a;\r\n  color: #fff;\r\n  border-color: #67c23a;\r\n}\r\n\r\n/* 添加底部间距，避免内容被遮挡 */\r\n.bottom-space {\r\n  height: 20px;\r\n}\r\n\r\n/* 确保底部操作栏固定在底部 */\r\n.exam-footer {\r\n  position: sticky;\r\n  bottom: 0;\r\n  z-index: 10;\r\n  background: #fff;\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.exam-footer .left {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.option-text {\r\n  flex: 1;\r\n  line-height: 1.6;\r\n}\r\n\r\n/* 允许选项中的富文本内容样式 */\r\n:deep(.option-text img) {\r\n  max-width: 100%;\r\n  height: auto;\r\n  margin: 5px 0;\r\n}\r\n\r\n.stats {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-right: 20px;\r\n}\r\n\r\n.stat-item {\r\n  color: #606266;\r\n  font-size: 14px;\r\n}\r\n\r\n.right {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n/* 选项样式 */\r\n.option-item.correct {\r\n  background: #f0f9eb;\r\n  border-color: #67c23a;\r\n  color: #67c23a;\r\n}\r\n\r\n.option-item.wrong {\r\n  background: #fef0f0;\r\n  border-color: #f56c6c;\r\n  color: #f56c6c;\r\n}\r\n\r\n/* 自动下一题复选框样式 */\r\n:deep(.el-checkbox) {\r\n  margin-left: 20px;\r\n  color: #606266;\r\n}\r\n\r\n:deep(.el-checkbox__label) {\r\n  font-size: 14px;\r\n}\r\n\r\n.option-item.multiple-choice {\r\n  position: relative;\r\n}\r\n\r\n.option-item.multiple-choice::before {\r\n  content: '';\r\n  position: absolute;\r\n  left: 15px;\r\n  width: 16px;\r\n  height: 16px;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 2px;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.option-item.multiple-choice.active::before {\r\n  background-color: #409eff;\r\n  border-color: #409eff;\r\n}\r\n\r\n.option-item.multiple-choice.active::after {\r\n  content: '✓';\r\n  position: absolute;\r\n  left: 18px;\r\n  color: white;\r\n  font-size: 12px;\r\n}\r\n\r\n.answer-analysis {\r\n  margin-top: 30px;\r\n  padding: 20px;\r\n  background: #f8f9fa;\r\n  border-radius: 4px;\r\n}\r\n\r\n.correct-answer,\r\n.analysis {\r\n  margin-bottom: 15px;\r\n  line-height: 1.6;\r\n}\r\n\r\n.correct-answer .label,\r\n.analysis .label {\r\n  color: #409EFF;\r\n  font-weight: 500;\r\n  margin-right: 10px;\r\n}\r\n\r\n.correct-answer .value {\r\n  color: #67c23a;\r\n  font-weight: 500;\r\n}\r\n\r\n.analysis {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.analysis .label {\r\n  color: #409EFF;\r\n  font-weight: 500;\r\n  margin-right: 10px;\r\n  display: block;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.analysis .value {\r\n  color: #606266;\r\n  line-height: 1.6;\r\n}\r\n\r\n/* 富文本内容样式 */\r\n:deep(.analysis .value img) {\r\n  max-width: 100%;\r\n  height: auto;\r\n  margin: 10px 0;\r\n}\r\n\r\n:deep(.analysis .value p) {\r\n  margin: 8px 0;\r\n}\r\n\r\n:deep(.analysis .value table) {\r\n  border-collapse: collapse;\r\n  margin: 10px 0;\r\n}\r\n\r\n:deep(.analysis .value td, .analysis .value th) {\r\n  border: 1px solid #dcdfe6;\r\n  padding: 8px;\r\n}\r\n\r\n:deep(.analysis .value pre) {\r\n  background: #f5f7fa;\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  overflow-x: auto;\r\n}\r\n\r\n/* 背题模式下正确答案的样式 */\r\n.option-item.correct {\r\n  background-color: #f0f9eb;\r\n  border-color: #67c23a;\r\n  color: #67c23a;\r\n}\r\n\r\n/* 背题模式下禁用hover效果 */\r\n.isWrongMode .option-item:hover {\r\n  background-color: inherit;\r\n  cursor: default;\r\n}\r\n</style> ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./exam.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./exam.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./exam.vue?vue&type=template&id=476ae08e&scoped=true\"\nimport script from \"./exam.vue?vue&type=script&lang=js\"\nexport * from \"./exam.vue?vue&type=script&lang=js\"\nimport style0 from \"./exam.vue?vue&type=style&index=0&id=476ae08e&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"476ae08e\",\n  null\n  \n)\n\nexport default component.exports","//import request from './request'\r\nimport request from '@/utils/request'\r\n// 获取公开题库列表\r\nexport function getRepoList(params) {\r\n  return request({\r\n    url: '/system/repos/list',\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n\r\n// 获取我的题库列表\r\nexport function getMyRepos(params) {\r\n  return request({\r\n    url: '/reposCollections/reposCollections/myRepos',\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n\r\n// 收藏题库\r\nexport function collectRepo(id) {\r\n  return request({\r\n    url: `/reposCollections/reposCollections/collect/${id}`,\r\n    method: 'get'\r\n  })\r\n}\r\n\r\n// 取消收藏题库\r\nexport function cancelCollectRepo(id) {\r\n  return request({\r\n    url: `/reposCollections/reposCollections/cancelCollect/${id}`,\r\n    method: 'get'\r\n  })\r\n}\r\n\r\n// 获取题库详情\r\nexport function getRepoInfo(id) {\r\n  return request({\r\n    url: `/practice/repo/info/${id}`,\r\n    method: 'get'\r\n  })\r\n}\r\n\r\n// 获取题目列表\r\nexport function getQuestions(id) {\r\n  return request({\r\n    url: `/practice/repo/questions/${id}`,\r\n    method: 'get'\r\n  })\r\n}\r\n\r\n// 提交答案\r\nexport function submitAnswers(data) {\r\n  return request({\r\n    url: '/practice/repo/submit',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n\r\n// 获取试题列表\r\nexport function getTopicList(params) {\r\n  return request({\r\n    url: '/exam/topic/list',\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n\r\n// 开始练习\r\nexport function startPracticeRecord(data) {\r\n  return request({\r\n    url: '/practice/practiceRecords/start',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n\r\n// 获取训练题目列表\r\nexport function getPracticeQuestions(recordId) {\r\n  return request({\r\n    url: `/practice/practiceRecords/${recordId}`,\r\n    method: 'get'\r\n  })\r\n}\r\n\r\n// 提交训练题目答案\r\nexport function submitPracticeAnswer(data) {\r\n  return request({\r\n    // url: '/practice/recordsTopic',\r\n    url:'/practice/recordsTopic/puOption',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n\r\n// 获取题库题型统计\r\nexport function getRepoTopicType(repoId) {\r\n  return request({\r\n    url: `/system/repos/getTopicType/${repoId}`,\r\n    method: 'get'\r\n  })\r\n}\r\n\r\n// 获取训练记录列表\r\nexport function getPracticeRecordList(params) {\r\n  return request({\r\n    url: '/practice/practiceRecords/list',\r\n    method: 'get',\r\n    params\r\n  })\r\n} "],"names":["render","_vm$currentQuestion","_vm$currentQuestion2","_vm$currentQuestion3","_vm$currentQuestion5","_vm","this","_c","_self","directives","name","rawName","value","loading","expression","staticClass","on","$event","$router","back","_v","_s","getExamTitle","correctCount","wrongCount","correctRate","model","autoNext","callback","$$v","currentQuestion","typeName","currentIndex","domProps","title","_l","options","option","_vm$currentQuestion4","key","id","class","active","isOptionSelected","type","isWrongMode","isCorrectAnswer","selectOption","label","content","getCorrectAnswerLabel","questionsTopicVo","analysis","_e","questions","q","index","answered","goToQuestion","attrs","prevQuestion","isLastQuestion","nextQuestion","push","handleNextOrSubmit","submitExam","staticRenderFns","data","computed","totalQuestions","length","$route","query","typeMap","sequence","random","wrong","single","multiple","judge","total","Math","round","correctOptions","filter","isRight","map","join","created","fetchQuestions","methods","_this","_asyncToGenerator","_regenerator","m","_callee","recordId","res","_res$data","questionList","_t","w","_context","p","n","Error","getPracticeQuestions","v","code","practiceRecordsTopicList","$message","warning","a","formatQuestions","logger","log","error","message","f","_this2","debug","item","questionType","getTypeName","formatOptions","questionOptionsList","answer","isCorrect","correctAnswer","rightOptions","String","fromCharCode","optionId","find","opt","Array","isArray","includes","_this3","indexOf","splice","hasAnswer","wasAnswered","wasCorrect","userAnswer","sort","setTimeout","_this$currentQuestion","_this$currentQuestion2","submitMultipleAnswer","_this4","_callee2","unfinishedIndex","_context2","findIndex","$confirm","concat","confirmButtonText","cancelButtonText","then","submitAllAnswers","catch","_this5","_callee3","submitPromises","_t2","_context3","question","userOptions","submitPracticeAnswer","Boolean","Promise","all","success","_this6","split","component","getRepoList","params","request","url","method","getMyRepos","collectRepo","cancelCollectRepo","getRepoInfo","startPracticeRecord","getRepoTopicType","repoId","getPracticeRecordList"],"sourceRoot":""}